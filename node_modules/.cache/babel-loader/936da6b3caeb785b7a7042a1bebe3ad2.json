{"ast":null,"code":"var _jsxFileName = \"/Users/pettertchirkov/Documents/GitHub/shortio/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/weather';\nconst API_KEY = `7250b4aa5d0ccdb8e2179a7a8f4185ec`;\n\nconst dateBuilder = d => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day} ${date} ${month} ${year}`;\n};\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      maxTemp: undefined,\n      minTemp: undefined,\n      error: undefined,\n      lon: undefined,\n      lat: undefined,\n      weather: undefined,\n      data: undefined\n    };\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n\n      if (city) {\n        const api_url = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`);\n        const data = await api_url.json();\n        console.log(data);\n        this.setState({\n          temp: data.list[0],\n          city: data.city.name,\n          country: data.city.country,\n          error: undefined,\n          data: data\n        });\n      } else {\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          maxTemp: undefined,\n          minTemp: undefined,\n          error: 'Please enter the city',\n          lon: undefined,\n          lat: undefined,\n          weather: undefined\n        });\n      }\n\n      console.log(this.state.temp);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Info, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Form, {\n      weatherMethod: this.getWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      data: this.state.data,\n      temp: this.state.temp,\n      city: this.state.city,\n      country: this.state.country,\n      maxTemp: this.state.maxTemp,\n      minTemp: this.state.minTemp,\n      lat: this.state.lat,\n      lon: this.state.lon,\n      weather: this.state.weather,\n      error: this.state.error,\n      date: this.dateBuilder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pettertchirkov/Documents/GitHub/shortio/src/App.js"],"names":["React","Info","Form","Weather","API_KEY","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","App","Component","state","temp","undefined","city","country","maxTemp","minTemp","error","lon","lat","weather","data","getWeather","e","preventDefault","target","elements","value","api_url","fetch","json","console","log","setState","list","name","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Info from './components/info'\nimport Form from './components/form'\nimport Weather from './components/weather'\n\nconst API_KEY = `7250b4aa5d0ccdb8e2179a7a8f4185ec`;\n\nconst dateBuilder = (d) => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday'\n  ];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day} ${date} ${month} ${year}`\n}\nclass App extends React.Component {\n\n\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    maxTemp: undefined,\n    minTemp: undefined,\n    error: undefined,\n    lon: undefined,\n    lat: undefined,\n    weather: undefined,\n    data: undefined\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n\n\n    if (city) {\n      const api_url = await\n        fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n      console.log(data);\n\n\n      this.setState({\n        temp: data.list[0],\n        city: data.city.name,\n        country: data.city.country,\n        error: undefined,\n        data: data\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        maxTemp: undefined,\n        minTemp: undefined,\n        error: 'Please enter the city',\n        lon: undefined,\n        lat: undefined,\n        weather: undefined\n      });\n    }\n    console.log(this.state.temp)\n  }\n\n  render() {\n    return (\n      <div>\n        <Info />\n        <Form weatherMethod={this.getWeather} />\n        <Weather\n          data={this.state.data}\n          temp={this.state.temp}\n          city={this.state.city}\n          country={this.state.country}\n          maxTemp={this.state.maxTemp}\n          minTemp={this.state.minTemp}\n          lat={this.state.lat}\n          lon={this.state.lon}\n          weather={this.state.weather}\n          error={this.state.error}\n          date={this.dateBuilder}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}